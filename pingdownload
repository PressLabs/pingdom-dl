#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim: ft=python:sw=4:ts=4:sts=4:et:
#
# Copyright 2016 Presslabs SRL
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import csv
import logging
import re
import sys
import time
import unicodedata

import requests

from Queue import Queue
from threading import Thread

from requests.auth import HTTPBasicAuth

logger = logging.getLogger(__name__)
logger.addHandler(logging.StreamHandler(sys.stderr))
logger.setLevel(logging.INFO)

def _slugify(value):
    """
    Normalizes string, converts to lowercase, removes
    non-alpha characters, and converts spaces to
    hyphens. From
    http://stackoverflow.com/questions/295135/turn-a-string-into-a-valid-filename-in-python
    """
    value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore')
    value = re.sub(r'[^\w\s-]', '', value.decode('utf-8', 'ignore'))
    value = value.strip().lower()
    value = re.sub(r'[-\s]+', '-', value)
    return value


class Application():
    def __init__(self):
        self.args = self._argparse()
        self.client = requests.Session()
        self.client.auth = HTTPBasicAuth(self.args.user, self.args.password)
        self.client.headers = {'App-Key': self.args.key}
        self._probes = None
        self._checks = None
        self.q = Queue()

        if self.args.debug:
            logger.setLevel(logging.DEBUG)

    @property
    def probes(self):
        if self._probes is None:
            r = self.client.get('https://api.pingdom.com/api/2.0/probes',
                                params={
                                    'includedeleted': 'true'
                                })
            if r.status_code == 200:
                self._probes = r.json()['probes']
            else:
                self._probes = []
        return self._probes

    def get_check(self, check_id):
        return filter(lambda x: x['id'] == check_id, self.checks).pop()

    def get_probe(self, probe_id):
        return filter(lambda x: x['id'] == probe_id, self.probes).pop()

    def save_raw_data(self, check, csvfile):
        now = int(time.time())
        created = check['created']
        span = 2764800 #seconds. We can only get raw data for this interval

        headers = ['name','human_time','time','status','responsetime',
                   'statusdesc', 'statusdesclong','probeid']

        writer = csv.DictWriter(csvfile, fieldnames=headers)
        writer.writeheader()

        for _from in range(created, now+1, span):
            _to = _from + span

            r = self.client.get(
                'https://api.pingdom.com/api/2.0/results/{0}'.format(check['id']),
                params={
                    'from': _from,
                    'to': _to
                }
            )
            if r.status_code == 200:
                results = r.json().get('results',[])
                for result in results:
                    result.update({
                        'name': check['name']
                    })
                    result['human_time'] = time.strftime(
                        '%Y-%m-%d %H:%M:%S', time.localtime(result['time']))
                    writer.writerow(result)
            else:
                args = {
                    'name': check['name'],
                    'from': _from,
                    'to': _to,
                    'code': r.status_code,
                    'message': r.json()['error']['errormessage']
                }
                logger.error("Could not fet raw data for '{name}' for "
                             "interval {from} - {to}. code={code}, message='"
                             "{message}'".format(**args))
                break


    @property
    def checks(self):
        if self._checks is None:
            r = self.client.get('https://api.pingdom.com/api/2.0/checks')
            if r.status_code == 200:
                checks = r.json()
                self._checks = checks['checks'] or []
            else:
                self._checks = []
        return self._checks

    @property
    def ids(self):
        if self.args.all:
            ids = [c['id'] for c in self.checks]
        else:
            ids = map(int,self.args.check_id) or []
        return sorted(filter(lambda x: x >= self.args.from_id, ids))

    def _argparse(self):
        parser = argparse.ArgumentParser(description='Download pingdom data')
        parser.add_argument('-u','--user', help='Pingdom username',
                            required=True)
        parser.add_argument('-p','--password', help='Pingdom password',
                            required=True)
        parser.add_argument('-k','--key', help='Pingdom application key',
                            required=True)

        checks_group = parser.add_mutually_exclusive_group(required=True)
        checks_group.add_argument('-a','--all', help='Backup all checks',
                                  action='store_true')
        checks_group.add_argument('-i','--check-id', help='Pingdom check ids '
                                  'to download data for', nargs='+')

        parser.add_argument('--from-id', help='Archive checks with id greater '
                            'than this id', type=int, default='0')

        parser.add_argument('--debug', help='Enable debug messages',
                            action='store_true')
        return parser.parse_args()

    def save_check_archive(self, check_id, progress):
        check = self.get_check(check_id)
        if not check:
            logger.error('Could not get check with id {0}'.format(check_id))
            return

        (cnt, total) = progress
        logger.info("[{2}/{3}] Fetching data for '{0}' "
                    "(check_id={1})".format(check['name'], check_id,
                                            cnt, total))
        with open('archive-{1}-{0}.csv'.format(_slugify(check['name']),
                                               check['id']), 'w') as f:
            self.save_raw_data(check, f)

    def save_probes(self):
        headers = [u'id', u'hostname', u'ip', u'ipv6', u'name', u'city',
                   u'countryiso', u'country', u'region', u'active', u'deleted']

        with open('probes.csv', 'w') as f:
            writer = csv.DictWriter(f, fieldnames=headers)
            writer.writeheader()
            writer.writerows(self.probes)

    def worker(self):
        while True:
            (check_id, progress) = self.q.get()
            self.save_check_archive(check_id, progress)
            self.q.task_done()


    def __call__(self):
        # self.save_probes()
        cnt = 0
        for check_id in self.ids:
            cnt = cnt + 1
            progress = (cnt, len(self.ids))
            self.q.put((check_id, progress))
        for _ in range(4):
            t = Thread(target=self.worker)
            t.daemon = True
            t.start()

        self.q.join()


def main():
    print 'Download pingdom'

if __name__ == '__main__':
    app = Application()
    app()
